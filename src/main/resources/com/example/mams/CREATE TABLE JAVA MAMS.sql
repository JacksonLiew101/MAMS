CREATE SCHEMA IF NOT EXISTS `JAVA_MAMS` DEFAULT CHARACTER SET utf8;

DROP TABLE IF EXISTS ALBUM_RENTAL;
DROP TABLE IF EXISTS RENTAL;
DROP TABLE IF EXISTS ALBUM;
DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS CARD;




CREATE TABLE IF NOT EXISTS `JAVA_MAMS`.`CARD` (
  `CARD_ID` INT NOT NULL AUTO_INCREMENT,
  `CARD_NO` BIGINT UNSIGNED NOT NULL,
  `CARD_EXPIRY_YEAR` INT(2) NOT NULL,
  `CARD_EXPIRY_MONTH` INT(2) NOT NULL,
  `CVV` INT(3) NOT NULL,
  `CARDHOLDER_NAME` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`CARD_ID`),
  UNIQUE INDEX `CARD_NO_UNIQUE` (`CARD_NO` ASC) VISIBLE,
  UNIQUE INDEX `CARD_ID_UNIQUE` (`CARD_ID` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 20000;

CREATE TABLE IF NOT EXISTS `JAVA_MAMS`.`CUSTOMER` (
  `CUSTOMER_ID` INT NOT NULL AUTO_INCREMENT,
  `CUSTOMER_F_NAME` VARCHAR(30) NOT NULL,
  `CUSTOMER_L_NAME` VARCHAR(30) NOT NULL,
  `CUSTOMER_EMAIL` VARCHAR(50) NOT NULL,
  `CUSTOMER_PHONE_NO` VARCHAR(15) NOT NULL,
  `CARD_ID` INT NOT NULL,
  UNIQUE INDEX `CUSTOMER_ID_UNIQUE` (`CUSTOMER_ID` ASC) VISIBLE,
  UNIQUE INDEX `CUSTOMER_PHONE_NO_UNIQUE` (`CUSTOMER_PHONE_NO` ASC) VISIBLE,
  UNIQUE INDEX `CUSTOMER_EMAIL_UNIQUE` (`CUSTOMER_EMAIL` ASC) VISIBLE,
  INDEX `CARD_ID_idx` (`CARD_ID` ASC) VISIBLE,
  PRIMARY KEY (`CUSTOMER_ID`),
  UNIQUE INDEX `CARD_ID_UNIQUE` (`CARD_ID` ASC) VISIBLE,
  CONSTRAINT `CARD_ID`
    FOREIGN KEY (`CARD_ID`)
    REFERENCES `JAVA_MAMS`.`CARD` (`CARD_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 10000;

CREATE TABLE IF NOT EXISTS `JAVA_MAMS`.`RENTAL` (
  `RENTAL_ID` INT NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` INT NOT NULL,
  `RENTAL_DATE` DATE NOT NULL,
  `RENTAL_STATUS` VARCHAR(20) NOT NULL DEFAULT 'RENTED',
  `TOTAL_RENTAL_COST` DOUBLE(7,2) NOT NULL DEFAULT 0.0,
  PRIMARY KEY (`RENTAL_ID`),
  UNIQUE INDEX `RENTAL_ID_UNIQUE` (`RENTAL_ID` ASC) VISIBLE,
  CONSTRAINT `CUSTOMER_ID`
    FOREIGN KEY (`CUSTOMER_ID`)
    REFERENCES `JAVA_MAMS`.`CUSTOMER` (`CUSTOMER_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 30000;

CREATE TABLE IF NOT EXISTS `JAVA_MAMS`.`ALBUM` (
  `ALBUM_ID` INT NOT NULL AUTO_INCREMENT,
  `ALBUM_NAME` VARCHAR(50) NOT NULL,
  `ARTIST` VARCHAR(50) NOT NULL,
  `GENRE` VARCHAR(30) NOT NULL,
  `YEAR_OF_RELEASE` INT(4) NOT NULL,
  `QUANTITY_ON_HAND` INT NOT NULL,
  `ALBUM_UNIT_PRICE` DOUBLE(7,2) NOT NULL,
  PRIMARY KEY (`ALBUM_ID`),
  UNIQUE INDEX `ALBUM_ID_UNIQUE` (`ALBUM_ID` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 40000;

CREATE TABLE IF NOT EXISTS `JAVA_MAMS`.`ALBUM_RENTAL` (
  `LINE_NUMBER` INT NOT NULL AUTO_INCREMENT,
  `RENTAL_ID` INT NOT NULL,
  `ALBUM_ID` INT NOT NULL,
  `QUANTITY_ALBUM_RENTED` INT NOT NULL,
  `ALBUM_UNIT_PRICE_WHEN_RENTED` DOUBLE(5,2) NOT NULL,
  `TOTAL_ALBUM_COST` DOUBLE(5,2) NOT NULL DEFAULT 0,
  `RENTAL_STATUS_ALBUM_RENTAL` VARCHAR(15) NOT NULL DEFAULT 'RENTED',
  PRIMARY KEY (`LINE_NUMBER`, `RENTAL_ID`),
  UNIQUE INDEX `LINE_NUMBER_UNIQUE` (`LINE_NUMBER` ASC) VISIBLE,
  CONSTRAINT `RENTAL_ID`
    FOREIGN KEY (`RENTAL_ID`)
    REFERENCES `JAVA_MAMS`.`RENTAL` (`RENTAL_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ALBUM_ID`
    FOREIGN KEY (`ALBUM_ID`)
    REFERENCES `JAVA_MAMS`.`ALBUM` (`ALBUM_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 50000;

DROP TRIGGER IF EXISTS `java_mams`.`RENTAL_AFTER_UPDATE`;
DELIMITER $$
USE `java_mams`$$
CREATE DEFINER = CURRENT_USER TRIGGER `JAVA_MAMS`.`RENTAL_AFTER_UPDATE` AFTER UPDATE ON `RENTAL` FOR EACH ROW
BEGIN
	IF NEW.RENTAL_STATUS = 'RETURNED' THEN
		UPDATE ALBUM_RENTAL
        SET ALBUM_RENTAL.RENTAL_STATUS_ALBUM_RENTAL = NEW.RENTAL_STATUS
        WHERE ALBUM_RENTAL.RENTAL_ID = NEW.RENTAL_ID;
	END IF;
END$$
DELIMITER ;



DROP TRIGGER IF EXISTS `java_mams`.`ALBUM_RENTAL_BEFORE_INSERT`;
DELIMITER $$
USE `java_mams`$$
CREATE DEFINER = CURRENT_USER TRIGGER `JAVA_MAMS`.`ALBUM_RENTAL_BEFORE_INSERT` BEFORE INSERT ON `ALBUM_RENTAL` FOR EACH ROW
BEGIN
    SET NEW.TOTAL_ALBUM_COST = NEW.ALBUM_UNIT_PRICE_WHEN_RENTED * NEW.QUANTITY_ALBUM_RENTED;
END$$
DELIMITER ;


DROP TRIGGER IF EXISTS `java_mams`.`ALBUM_RENTAL_AFTER_INSERT`;
DELIMITER $$
USE `java_mams`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `ALBUM_RENTAL_AFTER_INSERT` AFTER INSERT ON `album_rental` FOR EACH ROW BEGIN
	UPDATE ALBUM
    SET ALBUM.QUANTITY_ON_HAND = ALBUM.QUANTITY_ON_HAND - NEW.QUANTITY_ALBUM_RENTED
    WHERE ALBUM.ALBUM_ID = NEW.ALBUM_ID;
    UPDATE RENTAL
    SET RENTAL.TOTAL_RENTAL_COST = RENTAL.TOTAL_RENTAL_COST + NEW.TOTAL_ALBUM_COST
    WHERE RENTAL.RENTAL_ID = NEW.RENTAL_ID;
END$$
DELIMITER ;



DROP TRIGGER IF EXISTS `java_mams`.`ALBUM_RENTAL_AFTER_UPDATE`;
DELIMITER $$
USE `java_mams`$$
CREATE DEFINER = CURRENT_USER TRIGGER `JAVA_MAMS`.`ALBUM_RENTAL_AFTER_UPDATE` AFTER UPDATE ON `ALBUM_RENTAL` FOR EACH ROW
BEGIN
	IF NEW.RENTAL_STATUS_ALBUM_RENTAL = 'RETURNED' THEN
    UPDATE ALBUM
    SET ALBUM.QUANTITY_ON_HAND = ALBUM.QUANTITY_ON_HAND + NEW.QUANTITY_ALBUM_RENTED
    WHERE ALBUM.ALBUM_ID = NEW.ALBUM_ID;
    END IF;
END$$
DELIMITER ;





